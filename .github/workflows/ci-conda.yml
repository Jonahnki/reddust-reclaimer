name: CI (Micromamba Matrix)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Tests (py${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: environment.yml
          create-args: python=${{ matrix.python-version }}
          cache-environment: true
          cache-downloads: true
          micromamba-version: latest

      - name: Show environment
        shell: bash -l {0}
        run: |
          micromamba info
          micromamba list
          python -V

      - name: Install pip extras
        shell: bash -l {0}
        run: |
          python -m pip install --upgrade pip
          # Ensure dev tools and security scanners
          pip install pytest-xdist nbconvert pip-audit bandit codecov

      - name: Lint (flake8)
        shell: bash -l {0}
        run: |
          flake8 scripts/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 scripts/ --count --exit-zero --max-complexity=10 --max-line-length=88 --extend-ignore=E203,W503 --statistics

      - name: Format check (black)
        shell: bash -l {0}
        run: black --check scripts/ tests/

      - name: Type check (mypy)
        shell: bash -l {0}
        run: mypy scripts/ --ignore-missing-imports --no-strict-optional

      - name: Unit/Integration tests (pytest)
        shell: bash -l {0}
        env:
          PYTEST_ADDOPTS: -ra
        run: |
          pytest tests/ -v -n auto \
            --cov=scripts --cov-report=xml --cov-report=term-missing

      - name: Test example scripts execution
        if: always()
        shell: bash -l {0}
        run: |
          echo "Testing script help functions..."
          python scripts/dock_example.py --help || echo "dock_example.py help not available"
          python scripts/codon_optimization.py --help || echo "codon_optimization.py help not available"
          python scripts/metabolic_flux.py --help || echo "metabolic_flux.py help not available"

          echo "Testing script basic functionality..."
          python scripts/codon_optimization.py --sequence ATGAAATTTGGGTAG --analyze || echo "codon optimization test skipped"
          python scripts/metabolic_flux.py --objective biomass_synthesis || echo "metabolic flux test skipped"

      - name: Execute demo notebooks (validation)
        if: always()
        shell: bash -l {0}
        run: |
          mkdir -p build/notebooks-executed
          if compgen -G "notebooks/*.ipynb" > /dev/null; then
            for nb in notebooks/*.ipynb; do
              echo "Executing $nb";
              jupyter nbconvert --to notebook --execute "$nb" \
                --ExecutePreprocessor.timeout=1200 \
                --output-dir build/notebooks-executed || true;
            done
          else
            echo "No notebooks to execute";
          fi

      - name: Security scan (pip-audit)
        if: always()
        shell: bash -l {0}
        run: |
          pip-audit -r requirements.txt || true

      - name: Static security (bandit)
        if: always()
        shell: bash -l {0}
        run: |
          bandit -q -r scripts || true

      - name: Upload test coverage
        if: always()
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: micromamba-matrix
          fail_ci_if_error: false

      - name: Upload artifacts (notebooks, reports, processed data, results, logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-py${{ matrix.python-version }}
          if-no-files-found: ignore
          retention-days: 7
          path: |
            coverage.xml
            build/notebooks-executed/**
            data/processed/**
            docs/_build/**
            results/**
            logs/**

  docker:
    name: Docker build and scan
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image (no push)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: false
          outputs: type=docker,dest=/tmp/reddust-image.tar

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: reddust-image
          path: /tmp/reddust-image.tar
          retention-days: 7

      - name: Trivy scan (filesystem)
        continue-on-error: true
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          scan-ref: .
          format: table
          exit-code: 0

      - name: Trivy scan (image)
        continue-on-error: true
        uses: aquasecurity/trivy-action@0.24.0
        with:
          input: /tmp/reddust-image.tar
          format: table
          exit-code: 0
